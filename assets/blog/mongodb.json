{
  "title": "Mongodb",
  "blog": [
    {
      "heading": "How to install Mongodb in Ubuntu 18.04?",
      "url": "mongodb",
      "date_time": "14-July-2018",
      "description": [
        "<p>MongoDB is a free and open-source NoSQL document database used commonly in modern web applications.</p>",
        "<h3>Step 1: Installing MongoDB</h3>",
        "<p>First, update the packages list to have the most recent version of the repository listings:</p>",
        "<p><b>$ sudo apt update</b></p>",
        "<p>Now install the MongoDB package itself:</p>",
        "<p><b>$ sudo apt install -y mongodb</b></p>",
        "<p>This command installs several packages containing the latest stable version of MongoDB, along with helpful management tools for the MongoDB server. The database server is automatically started after installation.</p>",
        "<p>Next, let's verify that the server is running and works correctly.</p>",
        "<h3>Step 2 — Checking the Service and Database</h3>",
        "<p>The installation process started MongoDB automatically, but let's verify that the service is started and that the database is working.</p>",
        "<p>First, check the service's status:</p>",
        "<p><b>sudo systemctl status mongodb</b></p>",
        "<p>According to systemd, the MongoDB server is up and running.</p>",
        "<p>We can verify this further by actually connecting to the database server and executing a diagnostic command.</p>",
        "<p>Execute this command:</p>",
        "<code>mongo --eval 'db.runCommand({ connectionStatus: 1 })'</code>",
        "<p>This will output the current database version, the server address and port.</p>",
        "<p>A value of 1 for the ok field in the response indicates that the server is working properly.</p>",
        "<p>Next, we'll look at how to manage the server instance.</p>",
        "<p>Now check that MongoDB has been started on port 27017 with the netstat command.</p>",
        "<p><b>$ netstat -plntu</b></p>",
        "<h3>Step 3 — Managing the MongoDB Service</h3>",
        "<p>MongoDB installs as a systemd service, which means that you can manage it using standard systemd commands alongside all other sytem services in Ubuntu.</p>",
        "<p>To verify the status of the service, type:</p>",
        "<p><b>$ sudo systemctl status mongodb</b></p>",
        "<p>You can stop the server anytime by typing:</p>",
        "<p><b>$ sudo systemctl stop mongodb</b></p>",
        "<p>To start the server when it is stopped, type:</p>",
        "<p><b>$ sudo systemctl start mongodb</b></p>",
        "<p>You can also restart the server with a single command:</p>",
        "<p><b>$ sudo systemctl restart mongodb</b></p>",
        "<p>By default, MongoDB is configured to start automatically with the server. If you wish to disable the automatic startup, type:</p>",
        "<p><b>$ sudo systemctl disable mongodb</b></p>",
        "<p>It's just as easy to enable it again. To do this, use:</p>",
        "<p><b>$ sudo systemctl enable mongodb</b></p>",
        "<p>Next, let's adjust the firewall settings for our MongoDB installation.</p>",
        "<h3>Step 4 — Adjusting the Firewall (Optional)</h3>",
        "<p>Assuming you have followed the initial server setup tutorial instructions to enable the firewall on your server, the MongoDB server will be inaccessible from the internet.</p>",
        "<p>If you intend to use the MongoDB server only locally with applications running on the same server, this is the recommended and secure setting. However, if you would like to be able to connect to your MongoDB server from the internet, you have to allow the incoming connections in ufw.</p>",
        "<p>To allow access to MongoDB on its default port 27017 from everywhere, you could use sudo ufw allow 27017. However, enabling internet access to MongoDB server on a default installation gives anyone unrestricted access to the database server and its data.</p>",
        "<p>In most cases, MongoDB should be accessed only from certain trusted locations, such as another server hosting an application. To accomplish this task, you can allow access on MongoDB's default port while specifying the IP address of another server that will be explicitly allowed to connect:</p>",
        "<p><b>$ sudo ufw allow from your_other_server_ip/32 to any port 27017</b></p>",
        "<p>You can verify the change in firewall settings with ufw:</p>",
        "<p><b>$ sudo ufw status</b></p>",
        "<p>You should see traffic to port 27017 allowed in the output:</p>",
        "<pre><code>Status: active\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n27017                      ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n27017 (v6)                 ALLOW       Anywhere (v6)</code></pre>",
        "<p>If you have decided to allow only a certain IP address to connect to MongoDB server, the IP address of the allowed location will be listed instead of Anywhere in the output.</p>",
        "<p>You can find more advanced firewall settings for restricting access to services in UFW Essentials: Common Firewall Rules and Commands.</p>",
        "<p>Even though the port is open, MongoDB is currently only listening on the local address 127.0.0.1. To allow remote connections, add your server's publicly-routable IP address to the mongod.conf file.</p>",
        "<p>Open the MongoDB configuration file in your editor:</p>",
        "<p><b>$ sudo nano /etc/mongodb.conf</b></p>",
        "<p>Add your server's IP address to the bindIP value:</p>",
        "<pre>...\nlogappend=true\n\nbind_ip = 127.0.0.1,your_server_ip\n#port = 27017\n...</pre>",
        "<p>Be sure to place a comma between the existing IP address and the one you added.</p>",
        "<p>Save the file, exit the editor, and restart MongoDB:</p>",
        "<p><b>$ sudo systemctl restart mongodb</b></p>",
        "<p>MongoDB is now listening for remote connections, but anyone can access it.</p>"
      ]
    }
  ]
}